---
layout: fancy
title: automatas
---

<script context="module">
    import Katex from '$lib/components/layouts/modules/Katex.svelte';
    export { Katex };
</script>

# Autómatas y Lenguajes Formales

> Agosto 14

**Resumen**

Estas son notas del curso de Autómatas y Lenguajes Formales de la UNAM impartido por [César Hernández Cruz](https://www.researchgate.net/profile/Cesar-Hernandez-Cruz).

**Descripción del curso:** Vamos a ver los modelos matemáticos del computo, pues a fin de cuentas la computación teórica son matemáticas. Asimismo, algoritmos, diseño de algoritmos y demostraciones de posibilidad e imposibilidad. Dado que no se va a seguir al pie de la letra un libro, se va a realizar una homogenización donde todo va a estar en términos del lenguaje y la notación que vamos a seguir en el curso.

**Prerrequisitos:** Manejar bien la inducción (para demostrar propiedades sobre las cosas que vamos a estar definiendo), recursión (para definir cosas), aritmética modular, funciones, relaciones, entre otros materiales de Superior I y II.

<!--
recursión: la recursión es un teorema para definir sucesiones infinitas de cosas; las sucesiones no necesariamente son 
lineales, es decir, hay variantes, como lo es la recursión estructural. Para este curso vamos a usar la recursión natural
y sobre estructuras que vamos a definir: autómatas, máquinas de turing, etc...

función: relación donde cada elemento del dominio está relacionado con uno único del contradominio...

relación: un conjunto de parejas ordenadas

es muy útil F U pareja ordenada es mejor que explicarlo

prepararse para las participaciones (demostraciones sencillas del tipo del examen antes de la primera tarea)

inducción: propiedad de los números naturales a partir de la cual podemos demostrar propiedades que tienen los naturales,
y es muy sencillo: si tenemos un conjunto de los naturales que tiene al cero y cerrado bajo su sazon , ese conjunto 
es igual a todos los naturales y podemos usar eso para demostrar que ciertos conjuntos de los naturales contienen ciertas propiedades

cardinalidad: 
- cantidad de elementos que tiene un conjuntos
- el natural más pequeño con el que se puede biyectar
 
la comparación de cardinalidad siempre ocurre a través de funciones:
si hay una función inyectiva de A en B, entonces la cardinalidad de A es menor o igual que la cardinalidad de B
si hay una función suprayectiva de A en B la cardinalidad de B es menor o igual que la cardinalidad de A 
si hay una función biyectiva, entonces la cardinalidad es la misma (o es igual)
-->

> Agosto 15

## 

<Katex math={'|\\N| = \\aleph_0'} />

<br>

<Katex math={'|\\N \\times \\N| = \\aleph_0 = |\\Z|'} />

<br>

![](./../../assets/images/001.png)

<Katex math={'\\N^2 = \\N \\times \\N'} />

<br>

<Katex math={'|\\N^3| = |\\N \\times \\N \\times \\N| = \\aleph_0'} />

<br>

<Katex math={'|\\N^\\N| = \\aleph_0'} />

<br>
Un cjto es numerable si es biyectable con
<Katex math={'\\N'} />

Un cjto es contable si es finito o numberable

(Part.) **Prop:** _Toda unión numerable de conjuntos contables es contable._

**CSB:**

Sean A y B conjuntos. Si existen funciones inyectivas de A en B y de B en A, entonces A y B son biyectables.

La diagonal de ...

<Katex math={'\\R \\thicksim (0,1)'} />

<br>

<Katex math={'Sup (0,1) \\thicksim \\N'} />

**Def.** Un _alfabeto_ es un conjunto finito no vacío.

**Def.** Un _símbolo_ es un elemento en un alfabeto.

**Def.** Una cadena _w_ sobre un alfabeto 
<Katex math={'\\overline{Z}'} /> es una sucesión finita de elementos de 
<Katex math={'\\overline{Z}'} />, .

Hay una única cadena vacía que denotamos por 
<Katex math={'\\epsilon'} />.

Si
<Katex math={'w:S\\rightarrow{Z}'} /> es una cadena, entonces la longitud de w, |w|, se define por |w|=|s|, i.e. la longitud de w como sucesión.

**Def.** Si
<Katex math={'w_1'} /> y 
<Katex math={'w_2'} /> son cadenas sobre el alfabeto 
<Katex math={'\\Z'} />, la concatenación de
 <Katex math={'w_1'} /> y 
<Katex math={'w_2'} /> es la cadena
<Katex math={'w_1 \\cdot w_2 \\space (w_1, w_2)=w'} /> está dada por 
<Katex math={'w_j=(w_1)_j'} /> si 
<Katex math={'j 0, ..., |w_1|-1'} />

**Def.** Si _v_ y _w_ son cadenas sobre
<Katex math={'\\Z'} />
decimos que:

1. _v_ es subcadena de _w_ si existen cadenas _x_ y _y_ sobre 
<Katex math={'\\Z'} /> tales que 
<Katex math={'w=xvy'} /> (x y y pueden ser
<Katex math={'\\epsilon'} />)

2. _v_ es sufijo de _w_ si existe una _x_ sobre 
<Katex math={'\\Z'} /> tal que _w=xv_

3. _v_ es prefijo de _w_ si existe _y_, una cadena sobre 
<Katex math={'\\Z'} /> tal que _w=vy_

**Bibliografía** 

Kozen - _Automata and Computability_

Lewis, Papadimitriou - _Elements of Theory of Computation_

Hopcroft, Ullman - _Introduction to Automata Theory Languages and Computation_

Martin - _Introduction to Languages and the Theory of Computation_

Sipser - _Introduction to the Theory of Computation_

[notas-iván](https://ivanvladimir.gitlab.io/lfya_book/docs/00intro/#lecturas-recomendadas)
